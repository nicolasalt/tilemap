{"version":3,"file":"pixi-tilemap.umd.js","sources":["../src/CanvasTileRenderer.ts","../src/settings.ts","../src/Tilemap.ts","../src/CompositeTilemap.ts","../src/TextileResource.ts","../src/shaderGenerator.ts","../src/TilemapShader.ts","../src/TileRenderer.ts","../src/index.ts"],"sourcesContent":["import type { AbstractRenderer } from '@pixi/core';\n\n/**\n * The renderer plugin for canvas. It isn't registered by default.\n *\n * ```\n * import { CanvasTileRenderer } from '@pixi/tilemap';\n * import { CanvasRenderer } from '@pixi/canvas-core';\n *\n * // You must register this yourself (optional). @pixi/tilemap doesn't do it to\n * // prevent a hard dependency on @pixi/canvas-core.\n * CanvasRenderer.registerPlugin('tilemap', CanvasTileRenderer);\n * ```\n */\n// TODO: Move to @pixi/tilemap-canvas\nexport class CanvasTileRenderer\n{\n    /** The renderer */\n    renderer: AbstractRenderer;\n\n    /** The global tile animation state */\n    tileAnim = [0, 0];\n\n    /** @deprecated */\n    dontUseTransform = false;\n\n    /** @param renderer */\n    constructor(renderer: AbstractRenderer)\n    {\n        this.renderer = renderer;\n        this.tileAnim = [0, 0];\n    }\n}\n","import { SCALE_MODES } from '@pixi/constants';\n\n/**\n * These are additional @pixi/tilemap options.\n *\n * This settings should not be changed after the renderer has initialized; otherwise, the behavior\n * is undefined.\n */\nexport const settings = {\n    /** The default number of textures per tilemap in a tilemap composite. */\n    TEXTURES_PER_TILEMAP: 16,\n\n    /**\n     * The width/height of each texture tile in a {@link TEXTILE_DIMEN}. This is 1024px by default.\n     *\n     * This should fit all tile base-textures; otherwise, {@link TextileResource} may fail to correctly\n     * upload the textures togther in a tiled fashion.\n     */\n    TEXTILE_DIMEN: 1024,\n\n    /**\n     * The number of texture tiles per {@link TextileResource}.\n     *\n     * Texture tiling is disabled by default, and so this is set to `1` by default. If it is set to a\n     * higher value, textures will be uploaded together in a tiled fashion.\n     *\n     * Since {@link TextileResource} is a dual-column format, this should be even for packing\n     * efficiency. The optimal value is usually 4.\n     */\n    TEXTILE_UNITS: 1,\n\n    /** The scaling mode of the combined texture tiling. */\n    TEXTILE_SCALE_MODE: SCALE_MODES.LINEAR,\n\n    /** This will enable 32-bit index buffers. It's useful when you have more than 16K tiles. */\n    use32bitIndex: false,\n\n    /** Flags whether textiles should be cleared when each tile is uploaded. */\n    DO_CLEAR: true,\n\n    // Backward compatibility\n    get maxTextures(): number { return this.MAX_TEXTURES; },\n    set maxTextures(value: number) { this.MAX_TEXTURES = value; },\n\n    get boundSize(): number { return this.TEXTURE_TILE_DIMEN; },\n    set boundSize(value: number) { this.TILE_TEXTURE_DIMEN = value; },\n\n    get boundCountPerBuffer(): number { return this.TEXTILE_UNITS; },\n    set boundCountPerBuffer(value: number) { this.TEXTILE_UNITS = value; },\n};\n\n// @deprecated\nexport const Constant = settings;\n","import { Container, Bounds } from '@pixi/display';\nimport { DRAW_MODES } from '@pixi/constants';\nimport { Texture, Renderer } from '@pixi/core';\nimport { TileRenderer } from './TileRenderer';\nimport { Matrix, Rectangle, groupD8 } from '@pixi/math';\nimport { settings } from './settings';\n\nimport type { BaseTexture } from '@pixi/core';\nimport type { CanvasRenderer } from '@pixi/canvas-renderer';\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { TilemapGeometry } from './TilemapShader';\n\nenum POINT_STRUCT {\n    U,\n    V,\n    X,\n    Y,\n    TILE_WIDTH,\n    TILE_HEIGHT,\n    ROTATE,\n    ANIM_X,\n    ANIM_Y,\n    TEXTURE_INDEX,\n    ANIM_COUNT_X,\n    ANIM_COUNT_Y,\n    ANIM_DIVISOR,\n    ALPHA,\n}\n\nexport const POINT_STRUCT_SIZE = (Object.keys(POINT_STRUCT).length / 2);\n\n/**\n * A rectangular tilemap implementation that renders a predefined set of tile textures.\n *\n * The {@link Tilemap.tileset tileset} of a tilemap defines the list of base-textures that can be painted in the\n * tilemap. A texture is identified using its base-texture's index into the this list, i.e. changing the base-texture\n * at a given index in the tileset modifies the paint of all tiles pointing to that index.\n *\n * The size of the tileset is limited by the texture units supported by the client device. The minimum supported\n * value is 8, as defined by the WebGL 1 specification. `gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS`) can be used\n * to extract this limit. {@link CompositeTilemap} can be used to get around this limit by layering multiple tilemap\n * instances.\n *\n * @example\n * import { Tilemap } from '@pixi/tilemap';\n * import { Loader } from '@pixi/loaders';\n *\n * // Add the spritesheet into your loader!\n * Loader.shared.add('atlas', 'assets/atlas.json');\n *\n * // Make the tilemap once the tileset assets are available.\n * Loader.shared.load(function onTilesetLoaded()\n * {\n *      // The base-texture is shared between all the tile textures.\n *      const tilemap = new Tilemap([Texture.from('grass.png').baseTexture])\n *          .tile('grass.png', 0, 0)\n *          .tile('grass.png', 100, 100)\n *          .tile('brick_wall.png', 0, 100);\n * });\n */\nexport class Tilemap extends Container\n{\n    shadowColor = new Float32Array([0.0, 0.0, 0.0, 0.5]);\n    _globalMat: Matrix = null;\n\n    /**\n     * The tile animation frame.\n     *\n     * @see CompositeTilemap.tileAnim\n     */\n    public tileAnim: [number, number] = null;\n\n    /**\n     * This is the last uploaded size of the tilemap geometry.\n     * @ignore\n     */\n    modificationMarker = 0;\n\n    /** @ignore */\n    offsetX = 0;\n\n    /** @ignore */\n    offsetY = 0;\n\n    /** @ignore */\n    compositeParent = false;\n\n    /**\n     * The list of base-textures being used in the tilemap.\n     *\n     * This should not be shuffled after tiles have been added into this tilemap. Usually, only tile textures\n     * should be added after tiles have been added into the map.\n     */\n    protected tileset: Array<BaseTexture>;\n\n    /**\n     * The local bounds of the tilemap itself. This does not include DisplayObject children.\n     */\n    protected readonly tilemapBounds = new Bounds();\n\n    /** Flags whether any animated tile was added. */\n    protected hasAnimatedTile = false;\n\n    /** The interleaved geometry of the tilemap. */\n    private pointsBuf: Array<number> = [];\n\n    /**\n     * @param tileset - The tileset to use for the tilemap. This can be reset later with {@link Tilemap.setTileset}. The\n     *      base-textures in this array must not be duplicated.\n     */\n    constructor(tileset: BaseTexture | Array<BaseTexture>)\n    {\n        super();\n        this.setTileset(tileset);\n    }\n\n    /**\n     * @returns The tileset of this tilemap.\n     */\n    getTileset(): Array<BaseTexture>\n    {\n        return this.tileset;\n    }\n\n    /**\n     * Define the tileset used by the tilemap.\n     *\n     * @param tileset - The list of textures to use in the tilemap. If a base-texture (not array) is passed, it will\n     *  be wrapped into an array. This should not contain any duplicates.\n     */\n    setTileset(tileset: BaseTexture | Array<BaseTexture> = []): this\n    {\n        if (!Array.isArray(tileset))\n        {\n            tileset = [tileset];\n        }\n        for (let i = 0; i < tileset.length; i++)\n        {\n            if ((tileset[i] as unknown as Texture).baseTexture)\n            {\n                tileset[i] = (tileset[i] as unknown as Texture).baseTexture;\n            }\n        }\n\n        this.tileset = tileset;\n\n        return this;\n    }\n\n    /**  Clears all the tiles added into this tilemap. */\n    clear(): this\n    {\n        this.pointsBuf.length = 0;\n        this.modificationMarker = 0;\n        this.tilemapBounds.clear();\n        this.hasAnimatedTile = false;\n\n        return this;\n    }\n\n    /**\n     * Adds a tile that paints the given texture at (x, y).\n     *\n     * @param tileTexture - The tiling texture to render.\n     * @param x - The local x-coordinate of the tile's position.\n     * @param y - The local y-coordinate of the tile's position.\n     * @param options - Additional tile options.\n     * @param [options.u=texture.frame.x] - The x-coordinate of the texture in its base-texture's space.\n     * @param [options.v=texture.frame.y] - The y-coordinate of the texture in its base-texture's space.\n     * @param [options.tileWidth=texture.orig.width] - The local width of the tile.\n     * @param [options.tileHeight=texture.orig.height] - The local height of the tile.\n     * @param [options.animX=0] - For animated tiles, this is the \"offset\" along the x-axis for adjacent\n     *      animation frame textures in the base-texture.\n     * @param [options.animY=0] - For animated tiles, this is the \"offset\" along the y-axis for adjacent\n     *      animation frames textures in the base-texture.\n     * @param [options.rotate=0]\n     * @param [options.animCountX=1024] - For animated tiles, this is the number of animation frame textures\n     *      per row.\n     * @param [options.animCountY=1024] - For animated tiles, this is the number of animation frame textures\n     *      per column.\n     * @param [options.animDivisor=1] - For animated tiles, this is the animation duration of each frame\n     * @param [options.alpha=1] - Tile alpha\n     * @return This tilemap, good for chaining.\n     */\n    tile(\n        tileTexture: number | string | Texture | BaseTexture,\n        x: number,\n        y: number,\n        options: {\n            u?: number,\n            v?: number,\n            tileWidth?: number,\n            tileHeight?: number,\n            animX?: number,\n            animY?: number,\n            rotate?: number,\n            animCountX?: number,\n            animCountY?: number,\n            animDivisor?: number,\n            alpha?: number,\n        } = {}\n    ): number\n    {\n        let baseTexture: BaseTexture;\n        let textureIndex = -1;\n\n        if (typeof tileTexture === 'number')\n        {\n            textureIndex = tileTexture;\n            baseTexture = this.tileset[textureIndex];\n        }\n        else\n        {\n            let texture: Texture | BaseTexture;\n\n            if (typeof tileTexture === 'string')\n            {\n                texture = Texture.from(tileTexture);\n            }\n            else\n            {\n                texture = tileTexture;\n            }\n\n            const textureList = this.tileset;\n\n            for (let i = 0; i < textureList.length; i++)\n            {\n                if (textureList[i] === texture.castToBaseTexture())\n                {\n                    textureIndex = i;\n                    break;\n                }\n            }\n\n            if ('baseTexture' in texture)\n            {\n                options.u = options.u ?? texture.frame.x;\n                options.v = options.v ?? texture.frame.y;\n                options.tileWidth = options.tileWidth ?? texture.orig.width;\n                options.tileHeight = options.tileHeight ?? texture.orig.height;\n            }\n\n            baseTexture = texture.castToBaseTexture();\n        }\n\n        if (!baseTexture || textureIndex < 0)\n        {\n            console.error('The tile texture was not found in the tilemap tileset.');\n\n            return -1;\n        }\n\n        const {\n            u = 0,\n            v = 0,\n            tileWidth = baseTexture.realWidth,\n            tileHeight = baseTexture.realHeight,\n            animX = 0,\n            animY = 0,\n            rotate = 0,\n            animCountX = 1024,\n            animCountY = 1024,\n            animDivisor = 1,\n            alpha = 1,\n        } = options;\n\n        const pb = this.pointsBuf;\n\n        this.hasAnimatedTile = this.hasAnimatedTile || animX > 0 || animY > 0;\n\n        pb.push(u);\n        pb.push(v);\n        pb.push(x);\n        pb.push(y);\n        pb.push(tileWidth);\n        pb.push(tileHeight);\n        pb.push(rotate);\n        pb.push(animX | 0);\n        pb.push(animY | 0);\n        pb.push(textureIndex);\n        pb.push(animCountX);\n        pb.push(animCountY);\n        pb.push(animDivisor);\n        pb.push(alpha);\n\n        this.tilemapBounds.addFramePad(x, y, x + tileWidth, y + tileHeight, 0, 0);\n\n        return this.pointsBuf.length;\n    }\n\n    /** Changes the rotation of the last tile. */\n    tileRotate(rotate: number): void\n    {\n        const pb = this.pointsBuf;\n\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.TEXTURE_INDEX)] = rotate;\n    }\n\n    /** Changes the `animX`, `animCountX` of the last tile. */\n    tileAnimX(offset: number, count: number): void\n    {\n        const pb = this.pointsBuf;\n\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ANIM_X)] = offset;\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ANIM_COUNT_X)] = count;\n        // pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ANIM_DIVISOR)] = duration;\n    }\n\n    /** Changes the `animY`, `animCountY` of the last tile. */\n    tileAnimY(offset: number, count: number): void\n    {\n        const pb = this.pointsBuf;\n\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ANIM_Y)] = offset;\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ANIM_COUNT_Y)] = count;\n    }\n\n    /** Changes the `animDivisor` value of the last tile. */\n    tileAnimDivisor(divisor: number): void\n    {\n        const pb = this.pointsBuf;\n\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ANIM_DIVISOR)] = divisor;\n    }\n\n    tileAlpha(alpha: number): void\n    {\n        const pb = this.pointsBuf;\n\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ALPHA)] = alpha;\n    }\n\n    tileAlphaForIndex(index: number, alpha: number): void\n    {\n        const pb = this.pointsBuf;\n\n        pb[index - (POINT_STRUCT_SIZE - POINT_STRUCT.ALPHA)] = alpha;\n    }\n\n    renderCanvas = (renderer: CanvasRenderer): void =>\n    {\n        const plugin = renderer.plugins.tilemap;\n\n        if (plugin && !plugin.dontUseTransform)\n        {\n            const wt = this.worldTransform;\n\n            renderer.context.setTransform(\n                wt.a,\n                wt.b,\n                wt.c,\n                wt.d,\n                wt.tx * renderer.resolution,\n                wt.ty * renderer.resolution\n            );\n        }\n\n        this.renderCanvasCore(renderer);\n    }\n\n    renderCanvasCore(renderer: CanvasRenderer): void\n    {\n        if (this.tileset.length === 0) return;\n        const points = this.pointsBuf;\n        const tileAnim = this.tileAnim || (renderer.plugins.tilemap && renderer.plugins.tilemap.tileAnim);\n\n        renderer.context.fillStyle = '#000000';\n        for (let i = 0, n = points.length; i < n; i += POINT_STRUCT_SIZE)\n        {\n            let x1 = points[i + POINT_STRUCT.U] * tileAnim[0];\n            let y1 = points[i + POINT_STRUCT.V] * tileAnim[1];\n            const x2 = points[i + POINT_STRUCT.X];\n            const y2 = points[i + POINT_STRUCT.Y];\n            const w = points[i + POINT_STRUCT.TILE_WIDTH];\n            const h = points[i + POINT_STRUCT.TILE_HEIGHT];\n\n            x1 += points[i + POINT_STRUCT.ANIM_X] * renderer.plugins.tilemap.tileAnim[0];\n            y1 += points[i + POINT_STRUCT.ANIM_Y] * renderer.plugins.tilemap.tileAnim[1];\n\n            const textureIndex = points[i + POINT_STRUCT.TEXTURE_INDEX];\n            const alpha = points[i + POINT_STRUCT.ALPHA];\n\n            // canvas does not work with rotate yet\n\n            if (textureIndex >= 0 && this.tileset[textureIndex])\n            {\n                renderer.context.globalAlpha = alpha;\n                renderer.context.drawImage(\n                    (this.tileset[textureIndex] as any).getDrawableSource(),\n                    x1, y1, w, h, x2, y2, w, h\n                );\n            }\n            else\n            {\n                renderer.context.globalAlpha = 0.5;\n                renderer.context.fillRect(x2, y2, w, h);\n            }\n            renderer.context.globalAlpha = 1;\n        }\n    }\n\n    private vbId = 0;\n    private vb: TilemapGeometry = null;\n    private vbBuffer: ArrayBuffer = null;\n    private vbArray: Float32Array = null;\n    private vbInts: Uint32Array = null;\n\n    private destroyVb(): void\n    {\n        if (this.vb)\n        {\n            this.vb.destroy();\n            this.vb = null;\n        }\n    }\n\n    render(renderer: Renderer): void\n    {\n        const plugin = (renderer.plugins as any).tilemap;\n        const shader = plugin.getShader();\n\n        renderer.batch.setObjectRenderer(plugin);\n        this._globalMat = shader.uniforms.projTransMatrix;\n        renderer\n            .globalUniforms\n            .uniforms\n            .projectionMatrix\n            .copyTo(this._globalMat)\n            .append(this.worldTransform);\n\n        shader.uniforms.shadowColor = this.shadowColor;\n        shader.uniforms.animationFrame = this.tileAnim || plugin.tileAnim;\n\n        this.renderWebGLCore(renderer, plugin);\n    }\n\n    renderWebGLCore(renderer: Renderer, plugin: TileRenderer): void\n    {\n        const points = this.pointsBuf;\n\n        if (points.length === 0) return;\n        const rectsCount = points.length / POINT_STRUCT_SIZE;\n\n        const shader = plugin.getShader();\n        const textures = this.tileset;\n\n        if (textures.length === 0) return;\n\n        plugin.bindTileTextures(renderer, textures);\n        renderer.shader.bind(shader, false);\n\n        // lost context! recover!\n        let vb = this.vb;\n\n        if (!vb)\n        {\n            vb = plugin.createVb();\n            this.vb = vb;\n            this.vbId = (vb as any).id;\n            this.vbBuffer = null;\n            this.modificationMarker = 0;\n        }\n\n        plugin.checkIndexBuffer(rectsCount, vb);\n        const boundCountPerBuffer = settings.TEXTILE_UNITS;\n\n        const vertexBuf = vb.getBuffer('aVertexPosition');\n        // if layer was changed, re-upload vertices\n        const vertices = rectsCount * vb.vertPerQuad;\n\n        if (vertices === 0) return;\n        if (this.modificationMarker !== vertices)\n        {\n            this.modificationMarker = vertices;\n            const vs = vb.stride * vertices;\n\n            if (!this.vbBuffer || this.vbBuffer.byteLength < vs)\n            {\n                // !@#$ happens, need resize\n                let bk = vb.stride;\n\n                while (bk < vs)\n                {\n                    bk *= 2;\n                }\n                this.vbBuffer = new ArrayBuffer(bk);\n                this.vbArray = new Float32Array(this.vbBuffer);\n                this.vbInts = new Uint32Array(this.vbBuffer);\n                vertexBuf.update(this.vbBuffer);\n            }\n\n            const arr = this.vbArray;\n            // const ints = this.vbInts;\n            // upload vertices!\n            let sz = 0;\n            // let tint = 0xffffffff;\n            let textureId = 0;\n            let shiftU: number = this.offsetX;\n            let shiftV: number = this.offsetY;\n\n            // let tint = 0xffffffff;\n            // const tint = -1;\n\n            for (let i = 0; i < points.length; i += POINT_STRUCT_SIZE)\n            {\n                const eps = 0.5;\n\n                if (this.compositeParent)\n                {\n                    const textureIndex = points[i + POINT_STRUCT.TEXTURE_INDEX];\n\n                    if (boundCountPerBuffer > 1)\n                    {\n                        // TODO: what if its more than 4?\n                        textureId = (textureIndex >> 2);\n                        shiftU = this.offsetX * (textureIndex & 1);\n                        shiftV = this.offsetY * ((textureIndex >> 1) & 1);\n                    }\n                    else\n                    {\n                        textureId = textureIndex;\n                        shiftU = 0;\n                        shiftV = 0;\n                    }\n                }\n                const x = points[i + POINT_STRUCT.X];\n                const y = points[i + POINT_STRUCT.Y];\n                const w = points[i + POINT_STRUCT.TILE_WIDTH];\n                const h = points[i + POINT_STRUCT.TILE_HEIGHT];\n                const u = points[i + POINT_STRUCT.U] + shiftU;\n                const v = points[i + POINT_STRUCT.V] + shiftV;\n                let rotate = points[i + POINT_STRUCT.ROTATE];\n\n                const animX = points[i + POINT_STRUCT.ANIM_X];\n                const animY = points[i + POINT_STRUCT.ANIM_Y];\n                const animWidth = points[i + POINT_STRUCT.ANIM_COUNT_X] || 1024;\n                const animHeight = points[i + POINT_STRUCT.ANIM_COUNT_Y] || 1024;\n\n                const animXEncoded = animX + (animWidth * 2048);\n                const animYEncoded = animY + (animHeight * 2048);\n                const animDivisor = points[i + POINT_STRUCT.ANIM_DIVISOR];\n                const alpha = points[i + POINT_STRUCT.ALPHA];\n\n                let u0: number;\n                let v0: number; let u1: number;\n                let v1: number; let u2: number;\n                let v2: number; let u3: number;\n                let v3: number;\n\n                if (rotate === 0)\n                {\n                    u0 = u;\n                    v0 = v;\n                    u1 = u + w;\n                    v1 = v;\n                    u2 = u + w;\n                    v2 = v + h;\n                    u3 = u;\n                    v3 = v + h;\n                }\n                else\n                {\n                    let w2 = w / 2;\n                    let h2 = h / 2;\n\n                    if (rotate % 4 !== 0)\n                    {\n                        w2 = h / 2;\n                        h2 = w / 2;\n                    }\n                    const cX = u + w2;\n                    const cY = v + h2;\n\n                    rotate = groupD8.add(rotate, groupD8.NW);\n                    u0 = cX + (w2 * groupD8.uX(rotate));\n                    v0 = cY + (h2 * groupD8.uY(rotate));\n\n                    rotate = groupD8.add(rotate, 2); // rotate 90 degrees clockwise\n                    u1 = cX + (w2 * groupD8.uX(rotate));\n                    v1 = cY + (h2 * groupD8.uY(rotate));\n\n                    rotate = groupD8.add(rotate, 2);\n                    u2 = cX + (w2 * groupD8.uX(rotate));\n                    v2 = cY + (h2 * groupD8.uY(rotate));\n\n                    rotate = groupD8.add(rotate, 2);\n                    u3 = cX + (w2 * groupD8.uX(rotate));\n                    v3 = cY + (h2 * groupD8.uY(rotate));\n                }\n\n                arr[sz++] = x;\n                arr[sz++] = y;\n                arr[sz++] = u0;\n                arr[sz++] = v0;\n                arr[sz++] = u + eps;\n                arr[sz++] = v + eps;\n                arr[sz++] = u + w - eps;\n                arr[sz++] = v + h - eps;\n                arr[sz++] = animXEncoded;\n                arr[sz++] = animYEncoded;\n                arr[sz++] = textureId;\n                arr[sz++] = animDivisor;\n                arr[sz++] = alpha;\n\n                arr[sz++] = x + w;\n                arr[sz++] = y;\n                arr[sz++] = u1;\n                arr[sz++] = v1;\n                arr[sz++] = u + eps;\n                arr[sz++] = v + eps;\n                arr[sz++] = u + w - eps;\n                arr[sz++] = v + h - eps;\n                arr[sz++] = animXEncoded;\n                arr[sz++] = animYEncoded;\n                arr[sz++] = textureId;\n                arr[sz++] = animDivisor;\n                arr[sz++] = alpha;\n\n                arr[sz++] = x + w;\n                arr[sz++] = y + h;\n                arr[sz++] = u2;\n                arr[sz++] = v2;\n                arr[sz++] = u + eps;\n                arr[sz++] = v + eps;\n                arr[sz++] = u + w - eps;\n                arr[sz++] = v + h - eps;\n                arr[sz++] = animXEncoded;\n                arr[sz++] = animYEncoded;\n                arr[sz++] = textureId;\n                arr[sz++] = animDivisor;\n                arr[sz++] = alpha;\n\n                arr[sz++] = x;\n                arr[sz++] = y + h;\n                arr[sz++] = u3;\n                arr[sz++] = v3;\n                arr[sz++] = u + eps;\n                arr[sz++] = v + eps;\n                arr[sz++] = u + w - eps;\n                arr[sz++] = v + h - eps;\n                arr[sz++] = animXEncoded;\n                arr[sz++] = animYEncoded;\n                arr[sz++] = textureId;\n                arr[sz++] = animDivisor;\n                arr[sz++] = alpha;\n            }\n\n            vertexBuf.update(arr);\n        }\n\n        (renderer.geometry as any).bind(vb, shader);\n        renderer.geometry.draw(DRAW_MODES.TRIANGLES, rectsCount * 6, 0);\n    }\n\n    /**\n     * @internal\n     * @ignore\n     */\n    isModified(anim: boolean): boolean\n    {\n        if (this.modificationMarker !== this.pointsBuf.length\n            || (anim && this.hasAnimatedTile))\n        {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * This will pull forward the modification marker.\n     *\n     * @internal\n     * @ignore\n     */\n    clearModify(): void\n    {\n        this.modificationMarker = this.pointsBuf.length;\n    }\n\n    /** @override */\n    protected _calculateBounds(): void\n    {\n        const { minX, minY, maxX, maxY } = this.tilemapBounds;\n\n        this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n    }\n\n    /** @override */\n    public getLocalBounds(rect?: Rectangle): Rectangle\n    {\n        // we can do a fast local bounds if the sprite has no children!\n        if (this.children.length === 0)\n        {\n            return this.tilemapBounds.getRectangle(rect);\n        }\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /** @override */\n    destroy(options?: IDestroyOptions): void\n    {\n        super.destroy(options);\n        this.destroyVb();\n    }\n\n    /**\n     * Deprecated signature for {@link Tilemap.tile tile}.\n     *\n     * @deprecated Since @pixi/tilemap 3.\n     */\n    addFrame(texture: Texture | string | number, x: number, y: number, animX: number, animY: number): boolean\n    {\n        this.tile(\n            texture,\n            x,\n            y,\n            {\n                animX,\n                animY,\n            }\n        );\n\n        return true;\n    }\n\n    /**\n     * Deprecated signature for {@link Tilemap.tile tile}.\n     *\n     * @deprecated Since @pixi/tilemap 3.\n     */\n    // eslint-disable-next-line max-params\n    addRect(\n        textureIndex: number,\n        u: number,\n        v: number,\n        x: number,\n        y: number,\n        tileWidth: number,\n        tileHeight: number,\n        animX = 0,\n        animY = 0,\n        rotate = 0,\n        animCountX = 1024,\n        animCountY = 1024,\n        animDivisor = 1,\n        alpha = 1,\n    ): number\n    {\n        return this.tile(\n            textureIndex,\n            x, y,\n            {\n                u, v, tileWidth, tileHeight, animX, animY, rotate, animCountX, animCountY, animDivisor, alpha\n            }\n        );\n    }\n}\n","import { Container } from '@pixi/display';\nimport { Texture, Renderer, BaseTexture } from '@pixi/core';\nimport { Matrix } from '@pixi/math';\nimport { Tilemap } from './Tilemap';\nimport { settings } from './settings';\n\nimport type { CanvasRenderer } from '@pixi/canvas-renderer';\nimport type { TileRenderer } from './TileRenderer';\n\n/**\n * A tilemap composite that lazily builds tilesets layered into multiple tilemaps.\n *\n * The composite tileset is the concatenatation of the individual tilesets used in the tilemaps. You can\n * preinitialized it by passing a list of tile textures to the constructor. Otherwise, the composite tilemap\n * is lazily built as you add more tiles with newer tile textures. A new tilemap is created once the last\n * tilemap has reached its limit (as set by {@link CompositeTilemap.texturesPerTilemap texturesPerTilemap}).\n *\n * @example\n * import { Application } from '@pixi/app';\n * import { CompositeTilemap } from '@pixi/tilemap';\n * import { Loader } from '@pixi/loaders';\n *\n * // Setup view & stage.\n * const app = new Application();\n *\n * document.body.appendChild(app.renderer.view);\n * app.stage.interactive = true;\n *\n * // Global reference to the tilemap.\n * let globalTilemap: CompositeTilemap;\n *\n * // Load the tileset spritesheet!\n * Loader.shared.load('atlas.json');\n *\n * // Initialize the tilemap scene when the assets load.\n * Loader.shared.load(function onTilesetLoaded()\n * {\n *      const tilemap = new CompositeTilemap();\n *\n *      // Setup the game level with grass and dungeons!\n *      for (let x = 0; x < 10; x++)\n *      {\n *          for (let y = 0; y < 10; y++)\n *          {\n *              tilemap.tile(\n *                  x % 2 === 0 && (x === y || x + y === 10) ? 'dungeon.png' : 'grass.png',\n *                  x * 100,\n *                  y * 100,\n *              );\n *          }\n *      }\n *\n *      globalTilemap = app.stage.addChild(tilemap);\n * });\n *\n * // Show a bomb at a random location whenever the user clicks!\n * app.stage.on('click', function onClick()\n * {\n *      if (!globalTilemap) return;\n *\n *      const x = Math.floor(Math.random() * 10);\n *      const y = Math.floor(Math.random() * 10);\n *\n *      globalTilemap.tile('bomb.png', x * 100, y * 100);\n * });\n */\nexport class CompositeTilemap extends Container\n{\n    /** The hard limit on the number of tile textures used in each tilemap. */\n    public readonly texturesPerTilemap: number;\n\n    /**\n     * The animation frame vector.\n     *\n     * Animated tiles have four parameters - `animX`, `animY`, `animCountX`, `animCountY`. The textures\n     * of adjacent animation frames are at offset `animX` or `animY` of each other, with `animCountX` per\n     * row and `animCountY` per column.\n     *\n     * The animation frame vector specifies which animation frame texture to use. If the x/y coordinate is\n     * larger than the `animCountX` or `animCountY` for a specific tile, the modulus is taken.\n     */\n    public tileAnim: [number, number] = null;\n\n    /** The last modified tilemap. */\n    public lastModifiedTilemap: Tilemap = null;\n\n    private modificationMarker = 0;\n    private shadowColor = new Float32Array([0.0, 0.0, 0.0, 0.5]);\n    private _globalMat: Matrix = null;\n\n    /**\n     * @param tileset - A list of tile base-textures that will be used to eagerly initialized the layered\n     *  tilemaps. This is only an performance optimization, and using {@link CompositeTilemap.tile tile}\n     *  will work equivalently.\n     */\n    constructor(tileset?: Array<BaseTexture>)\n    {\n        super();\n\n        this.tileset(tileset);\n        this.texturesPerTilemap = settings.TEXTURES_PER_TILEMAP;\n    }\n\n    /**\n     * This will preinitialize the tilesets of the layered tilemaps.\n     *\n     * If used after a tilemap has been created (or a tile added), this will overwrite the tile textures of the\n     * existing tilemaps. Passing the tileset to the constructor instead is the best practice.\n     *\n     * @param tileTextures - The list of tile textures that make up the tileset.\n     */\n    tileset(tileTextures: Array<BaseTexture>): this\n    {\n        if (!tileTextures)\n        {\n            tileTextures = [];\n        }\n\n        const texPerChild = this.texturesPerTilemap;\n        const len1 = this.children.length;\n        const len2 = Math.ceil(tileTextures.length / texPerChild);\n\n        for (let i = 0; i < Math.min(len1, len2); i++)\n        {\n            (this.children[i] as Tilemap).setTileset(\n                tileTextures.slice(i * texPerChild, (i + 1) * texPerChild)\n            );\n        }\n        for (let i = len1; i < len2; i++)\n        {\n            const tilemap = new Tilemap(tileTextures.slice(i * texPerChild, (i + 1) * texPerChild));\n\n            tilemap.compositeParent = true;\n            tilemap.offsetX = settings.TEXTILE_DIMEN;\n            tilemap.offsetY = settings.TEXTILE_DIMEN;\n\n            // TODO: Don't use children\n            this.addChild(tilemap);\n        }\n\n        return this;\n    }\n\n    /** Clears the tilemap composite. */\n    clear(): this\n    {\n        for (let i = 0; i < this.children.length; i++)\n        {\n            (this.children[i] as Tilemap).clear();\n        }\n\n        this.modificationMarker = 0;\n\n        return this;\n    }\n\n    /** Changes the rotation of the last added tile. */\n    tileRotate(rotate: number): this\n    {\n        if (this.lastModifiedTilemap)\n        {\n            this.lastModifiedTilemap.tileRotate(rotate);\n        }\n\n        return this;\n    }\n\n    /** Changes `animX`, `animCountX` of the last added tile. */\n    tileAnimX(offset: number, count: number): this\n    {\n        if (this.lastModifiedTilemap)\n        {\n            this.lastModifiedTilemap.tileAnimX(offset, count);\n        }\n\n        return this;\n    }\n\n    /** Changes `animY`, `animCountY` of the last added tile. */\n    tileAnimY(offset: number, count: number): this\n    {\n        if (this.lastModifiedTilemap)\n        {\n            this.lastModifiedTilemap.tileAnimY(offset, count);\n        }\n\n        return this;\n    }\n\n    /** Changes `tileAnimDivisor` value of the last added tile. */\n    tileAnimDivisor(divisor: number): this\n    {\n        if (this.lastModifiedTilemap)\n        {\n            this.lastModifiedTilemap.tileAnimDivisor(divisor);\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds a tile that paints the given tile texture at (x, y).\n     *\n     * @param tileTexture - The tile texture. You can pass an index into the composite tilemap as well.\n     * @param x - The local x-coordinate of the tile's location.\n     * @param y - The local y-coordinate of the tile's location.\n     * @param options - Additional options to pass to {@link Tilemap.tile}.\n     * @param [options.u=texture.frame.x] - The x-coordinate of the texture in its base-texture's space.\n     * @param [options.v=texture.frame.y] - The y-coordinate of the texture in its base-texture's space.\n     * @param [options.tileWidth=texture.orig.width] - The local width of the tile.\n     * @param [options.tileHeight=texture.orig.height] - The local height of the tile.\n     * @param [options.animX=0] - For animated tiles, this is the \"offset\" along the x-axis for adjacent\n     *      animation frame textures in the base-texture.\n     * @param [options.animY=0] - For animated tiles, this is the \"offset\" along the y-axis for adjacent\n     *      animation frames textures in the base-texture.\n     * @param [options.rotate=0]\n     * @param [options.animCountX=1024] - For animated tiles, this is the number of animation frame textures\n     *      per row.\n     * @param [options.animCountY=1024] - For animated tiles, this is the number of animation frame textures\n     *      per column.\n     * @param [options.animDivisor=1] - For animated tiles, this is the animation duration each frame\n     * @param [options.alpha=1] - Tile alpha\n     * @return This tilemap, good for chaining.\n     */\n    tile(\n        tileTexture: Texture | string | number,\n        x: number,\n        y: number,\n        options: {\n            u?: number,\n            v?: number,\n            tileWidth?: number,\n            tileHeight?: number,\n            animX?: number,\n            animY?: number,\n            rotate?: number,\n            animCountX?: number,\n            animCountY?: number,\n            animDivisor?: number,\n            alpha?: number,\n        } = {}\n    ): number\n    {\n        let tilemap: Tilemap = null;\n        const children = this.children;\n\n        this.lastModifiedTilemap = null;\n\n        let result = -1;\n\n        if (typeof tileTexture === 'number')\n        {\n            const childIndex = tileTexture / this.texturesPerTilemap >> 0;\n            let tileIndex  = 0;\n\n            tilemap = children[childIndex] as Tilemap;\n\n            if (!tilemap)\n            {\n                tilemap = children[0] as Tilemap;\n\n                // Silently fail if the tilemap doesn't exist\n                if (!tilemap) return -1;\n\n                tileIndex = 0;\n            }\n            else\n            {\n                tileIndex = tileTexture % this.texturesPerTilemap;\n            }\n\n            result = tilemap.tile(\n                tileIndex,\n                x,\n                y,\n                options,\n            );\n        }\n        else\n        {\n            if (typeof tileTexture === 'string')\n            {\n                tileTexture = Texture.from(tileTexture);\n            }\n\n            // Probe all tilemaps to find which tileset contains the base-texture.\n            for (let i = 0; i < children.length; i++)\n            {\n                const child = children[i] as Tilemap;\n                const tex = child.getTileset();\n\n                for (let j = 0; j < tex.length; j++)\n                {\n                    if (tex[j] === tileTexture.baseTexture)\n                    {\n                        tilemap = child;\n                        break;\n                    }\n                }\n\n                if (tilemap)\n                {\n                    break;\n                }\n            }\n\n            // If no tileset contains the base-texture, attempt to add it.\n            if (!tilemap)\n            {\n                // Probe the tilemaps to find one below capacity. If so, add the texture into that tilemap.\n                for (let i = children.length - 1; i >= 0; i--)\n                {\n                    const child = children[i] as Tilemap;\n\n                    if (child.getTileset().length < this.texturesPerTilemap)\n                    {\n                        tilemap = child;\n                        child.getTileset().push(tileTexture.baseTexture);\n                        break;\n                    }\n                }\n\n                // Otherwise, create a new tilemap initialized with that tile texture.\n                if (!tilemap)\n                {\n                    tilemap = new Tilemap(tileTexture.baseTexture);\n                    tilemap.compositeParent = true;\n                    tilemap.offsetX = settings.TEXTILE_DIMEN;\n                    tilemap.offsetY = settings.TEXTILE_DIMEN;\n\n                    this.addChild(tilemap);\n                }\n            }\n\n            result = tilemap.tile(\n                tileTexture,\n                x,\n                y,\n                options,\n            );\n        }\n\n        this.lastModifiedTilemap = tilemap;\n\n        return result;\n    }\n\n    renderCanvas = (renderer: CanvasRenderer): void =>\n    {\n        if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n        {\n            return;\n        }\n\n        const tilemapPlugin = renderer.plugins.tilemap;\n\n        if (tilemapPlugin && !tilemapPlugin.dontUseTransform)\n        {\n            const wt = this.worldTransform;\n\n            renderer.context.setTransform(\n                wt.a,\n                wt.b,\n                wt.c,\n                wt.d,\n                wt.tx * renderer.resolution,\n                wt.ty * renderer.resolution\n            );\n        }\n\n        const layers = this.children;\n\n        for (let i = 0; i < layers.length; i++)\n        {\n            const layer = (layers[i] as Tilemap);\n\n            layer.tileAnim = this.tileAnim;\n            layer.renderCanvasCore(renderer);\n        }\n    }\n\n    render(renderer: Renderer): void\n    {\n        if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n        {\n            return;\n        }\n\n        const plugin = renderer.plugins.tilemap as TileRenderer;\n        const shader = plugin.getShader();\n\n        renderer.batch.setObjectRenderer(plugin);\n\n        // TODO: dont create new array, please\n        this._globalMat = shader.uniforms.projTransMatrix;\n        renderer.globalUniforms.uniforms.projectionMatrix.copyTo(this._globalMat).append(this.worldTransform);\n        shader.uniforms.shadowColor = this.shadowColor;\n        shader.uniforms.animationFrame = this.tileAnim || plugin.tileAnim;\n\n        renderer.shader.bind(shader, false);\n\n        const layers = this.children;\n\n        for (let i = 0; i < layers.length; i++)\n        {\n            (layers[i] as Tilemap).renderWebGLCore(renderer, plugin);\n        }\n    }\n\n    /**\n     * @internal\n     * @ignore\n     */\n    isModified(anim: boolean): boolean\n    {\n        const layers = this.children;\n\n        if (this.modificationMarker !== layers.length)\n        {\n            return true;\n        }\n        for (let i = 0; i < layers.length; i++)\n        {\n            if ((layers[i] as Tilemap).isModified(anim))\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @internal\n     * @ignore\n     */\n    clearModify(): void\n    {\n        const layers = this.children;\n\n        this.modificationMarker = layers.length;\n        for (let i = 0; i < layers.length; i++)\n        {\n            (layers[i] as Tilemap).clearModify();\n        }\n    }\n\n    /**\n     * @deprecated Since @pixi/tilemap 3.\n     * @see CompositeTilemap.tile\n     */\n    addFrame(\n        texture: Texture | string | number,\n        x: number,\n        y: number,\n        animX?: number,\n        animY?: number,\n        animWidth?: number,\n        animHeight?: number,\n        animDivisor?: number,\n        alpha?: number\n    ): number\n    {\n        return this.tile(\n            texture,\n            x, y,\n            {\n                animX,\n                animY,\n                animCountX: animWidth,\n                animCountY: animHeight,\n                animDivisor,\n                alpha\n            }\n        );\n    }\n\n    /**\n     * @deprecated @pixi/tilemap 3\n     * @see CompositeTilemap.tile\n     */\n    // eslint-disable-next-line max-params\n    addRect(\n        textureIndex: number,\n        u: number,\n        v: number,\n        x: number,\n        y: number,\n        tileWidth: number,\n        tileHeight: number,\n        animX?: number,\n        animY?: number,\n        rotate?: number,\n        animWidth?: number,\n        animHeight?: number\n    ): this\n    {\n        const childIndex: number = textureIndex / this.texturesPerTilemap >> 0;\n        const textureId: number = textureIndex % this.texturesPerTilemap;\n\n        if (this.children[childIndex] && (this.children[childIndex] as Tilemap).getTileset())\n        {\n            this.lastModifiedTilemap = (this.children[childIndex] as Tilemap);\n            this.lastModifiedTilemap.addRect(\n                textureId, u, v, x, y, tileWidth, tileHeight, animX, animY, rotate, animWidth, animHeight\n            );\n        }\n        else\n        {\n            this.lastModifiedTilemap = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * Alias for {@link CompositeTilemap.tileset tileset}.\n     *\n     * @deprecated Since @pixi/tilemap 3.\n     */\n    setBitmaps = this.tileset;\n\n    /**\n     * @deprecated Since @pixi/tilemap 3.\n     * @readonly\n     * @see CompositeTilemap.texturesPerTilemap\n     */\n    get texPerChild(): number { return this.texturesPerTilemap; }\n}\n","import { ALPHA_MODES } from '@pixi/constants';\nimport { BaseTexture, Renderer, Resource, Texture, GLTexture } from '@pixi/core';\nimport { settings } from './settings';\n\nexport interface TextileOptions\n{\n\tTEXTILE_DIMEN: number;\n\tTEXTILE_UNITS: number;\n\tDO_CLEAR?: boolean;\n}\n\ntype TextureTile = {\n\tdirtyId: number;\n\tx: number;\n\ty: number;\n\tbaseTexture: BaseTexture;\n};\n\n// For some reason ESLint goes mad with indendation in this file ^&^\n/* eslint-disable indent */\n\n/**\n * This texture tiling resource can be used to upload multiple base-textures together.\n *\n * This resource combines multiple base-textures into a \"textile\". They're laid out in\n * a dual column format, placed in row-order order. The size of each tile is predefined,\n * and defaults to {@link settings.TEXTILE_DIMEN}. This means that each input base-texture\n * must is smaller than that along both its width and height.\n *\n * @see settings.TEXTILE_UNITS\n */\nexport class TextileResource extends Resource\n{\n\t/** The base-texture that contains all the texture tiles. */\n\tpublic baseTexture: BaseTexture = null;\n\n\tprivate readonly doClear: boolean;\n\tprivate readonly tileDimen: number;\n\tprivate readonly tiles: Array<TextureTile>;\n\n\tprivate _clearBuffer: Uint8Array = null;\n\n\t/**\n\t * @param options - This will default to the \"settings\" exported by @pixi/tilemap.\n\t * @param options.TEXTILE_DIMEN - The dimensions of each tile.\n\t * @param options.TEXTILE_UNITS - The number of texture tiles.\n\t */\n\tconstructor(options: TextileOptions = settings)\n\t{\n\t\tsuper(\n\t\t\toptions.TEXTILE_DIMEN * 2,\n\t\t\toptions.TEXTILE_DIMEN * Math.ceil(options.TEXTILE_UNITS / 2),\n\t\t);\n\n\t\tconst tiles: TextureTile[] = this.tiles = new Array(options.TEXTILE_UNITS);\n\n\t\tthis.doClear = !!options.DO_CLEAR;\n\t\tthis.tileDimen = options.TEXTILE_DIMEN;\n\n\t\tfor (let j = 0; j < options.TEXTILE_UNITS; j++)\n\t\t{\n\t\t\ttiles[j] = {\n\t\t\t\tdirtyId: 0,\n\t\t\t\tx: options.TEXTILE_DIMEN * (j & 1),\n\t\t\t\ty: options.TEXTILE_DIMEN * (j >> 1),\n\t\t\t\tbaseTexture: Texture.WHITE.baseTexture,\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Sets the texture to be uploaded for the given tile.\n\t *\n\t * @param index - The index of the tile being set.\n\t * @param texture - The texture with the base-texture to upload.\n\t */\n\ttile(index: number, texture: BaseTexture): void\n\t{\n\t\tconst tile = this.tiles[index];\n\n\t\tif (tile.baseTexture === texture)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\ttile.baseTexture = texture;\n\t\tthis.baseTexture.update();\n\n\t\tthis.tiles[index].dirtyId = (this.baseTexture as any).dirtyId;\n\t}\n\n\t/** @override */\n\tbind(baseTexture: BaseTexture): void\n\t{\n\t\tif (this.baseTexture)\n\t\t{\n\t\t\tthrow new Error('Only one baseTexture is allowed for this resource!');\n\t\t}\n\n\t\tthis.baseTexture = baseTexture;\n\t\tsuper.bind(baseTexture);\n\t}\n\n\t/** @override */\n\tupload(renderer: Renderer, texture: BaseTexture, glTexture: GLTexture): boolean\n\t{\n\t\tconst { gl } = renderer;\n\t\tconst { width, height } = this;\n\n\t\tgl.pixelStorei(\n\t\t\tgl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,\n\t\t\ttexture.alphaMode === undefined || texture.alphaMode === ALPHA_MODES.UNPACK\n\t\t);\n\n\t\tif (glTexture.dirtyId < 0)\n\t\t{\n\t\t\t(glTexture as any).width = width;\n\t\t\t(glTexture as any).height = height;\n\n\t\t\tgl.texImage2D(texture.target, 0,\n\t\t\t\ttexture.format,\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\t0,\n\t\t\t\ttexture.format,\n\t\t\t\ttexture.type,\n\t\t\t\tnull);\n\t\t}\n\n\t\tconst doClear = this.doClear;\n\t\tconst tiles = this.tiles;\n\n\t\tif (doClear && !this._clearBuffer)\n\t\t{\n\t\t\tthis._clearBuffer = new Uint8Array(settings.TEXTILE_DIMEN * settings.TEXTILE_DIMEN * 4);\n\t\t}\n\n\t\tfor (let i = 0; i < tiles.length; i++)\n\t\t{\n\t\t\tconst spr = tiles[i];\n\t\t\tconst tex = spr.baseTexture;\n\n\t\t\tif (glTexture.dirtyId >= this.tiles[i].dirtyId)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst res = tex.resource as any;\n\n\t\t\tif (!tex.valid || !res || !res.source)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (doClear && (tex.width < this.tileDimen || tex.height < this.tileDimen))\n\t\t\t{\n\t\t\t\tgl.texSubImage2D(texture.target, 0,\n\t\t\t\t\tspr.x,\n\t\t\t\t\tspr.y,\n\t\t\t\t\tthis.tileDimen,\n\t\t\t\t\tthis.tileDimen,\n\t\t\t\t\ttexture.format,\n\t\t\t\t\ttexture.type,\n\t\t\t\t\tthis._clearBuffer);\n\t\t\t}\n\n\t\t\tgl.texSubImage2D(texture.target, 0,\n\t\t\t\tspr.x,\n\t\t\t\tspr.y,\n\t\t\t\ttexture.format,\n\t\t\t\ttexture.type,\n\t\t\t\tres.source);\n\t\t}\n\n\t\treturn true;\n\t}\n}\n","import type { TilemapShader } from './TilemapShader';\n\n/**\n * This will generate fragment shader code that samples the correct texture into the \"color\" variable.\n *\n * @internal\n * @ignore\n * @param maxTextures - The texture array length in the shader's uniforms.\n */\nfunction generateSampleSrc(maxTextures: number): string\n{\n    let src = '';\n\n    src += '\\n';\n    src += '\\n';\n\n    src += 'if(vTextureId <= -1.0) {';\n    src += '\\n\\tcolor = shadowColor;';\n    src += '\\n}';\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        src += '\\nelse ';\n\n        if (i < maxTextures - 1)\n        {\n            src += `if(textureId == ${i}.0)`;\n        }\n\n        src += '\\n{';\n        src += `\\n\\tcolor = texture2D(uSamplers[${i}], textureCoord * uSamplerSize[${i}]);`;\n        src += '\\n}';\n    }\n\n    src += '\\n';\n    src += '\\n';\n\n    return src;\n}\n\n/**\n * @internal\n * @ignore\n * @param shader\n * @param maxTextures\n */\nexport function fillSamplers(shader: TilemapShader, maxTextures: number): void\n{\n    const sampleValues: Array<number> = [];\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        sampleValues[i] = i;\n    }\n\n    shader.uniforms.uSamplers = sampleValues;\n\n    const samplerSize: Array<number> = [];\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        // These are overwritten by TileRenderer when textures actually bound.\n        samplerSize.push(1.0 / 2048);\n        samplerSize.push(1.0 / 2048);\n    }\n\n    shader.uniforms.uSamplerSize = samplerSize;\n}\n\n/**\n * @internal\n * @ignore\n * @param maxTextures\n * @param fragmentSrc\n * @returns\n */\nexport function generateFragmentSrc(maxTextures: number, fragmentSrc: string): string\n{\n    return fragmentSrc.replace(/%count%/gi, `${maxTextures}`)\n        .replace(/%forloop%/gi, generateSampleSrc(maxTextures));\n}\n","// eslint-disable-next-line @typescript-eslint/triple-slash-reference, spaced-comment\n///<reference path=\"../global.d.ts\" />\n\nimport * as shaderGenerator from './shaderGenerator';\nimport tilemapVertexTemplateSrc from './tilemap.vert';\nimport tilemapFragmentTemplateSrc from './tilemap.frag';\n\nimport { Buffer, Geometry, Shader, Program } from '@pixi/core';\nimport { Matrix } from '@pixi/math';\n\n// For some reason ESLint goes mad with indendation in this file ^&^\n/* eslint-disable no-mixed-spaces-and-tabs, indent */\n\nexport class TilemapShader extends Shader\n{\n\tmaxTextures = 0;\n\n\tconstructor(maxTextures: number)\n\t{\n\t    super(\n\t        new Program(\n\t\t\t\ttilemapVertexTemplateSrc,\n\t\t\t\tshaderGenerator.generateFragmentSrc(maxTextures, tilemapFragmentTemplateSrc)\n\t\t\t),\n\t        {\n\t            animationFrame: new Float32Array(2),\n\t            uSamplers: [],\n\t            uSamplerSize: [],\n\t            projTransMatrix: new Matrix()\n\t        }\n\t    );\n\n\t    this.maxTextures = maxTextures;\n\t    shaderGenerator.fillSamplers(this, this.maxTextures);\n\t}\n}\n\nexport class TilemapGeometry extends Geometry\n{\n\tvertSize = 13;\n\tvertPerQuad = 4;\n\tstride = this.vertSize * 4;\n\tlastTimeAccess = 0;\n\n\tconstructor()\n\t{\n\t    super();\n\n\t    const buf = this.buf = new Buffer(new Float32Array(2), true, false);\n\n\t    this.addAttribute('aVertexPosition', buf, 0, false, 0, this.stride, 0)\n\t        .addAttribute('aTextureCoord', buf, 0, false, 0, this.stride, 2 * 4)\n\t        .addAttribute('aFrame', buf, 0, false, 0, this.stride, 4 * 4)\n\t        .addAttribute('aAnim', buf, 0, false, 0, this.stride, 8 * 4)\n\t        .addAttribute('aTextureId', buf, 0, false, 0, this.stride, 10 * 4)\n            .addAttribute('aAnimDivisor', buf, 0, false, 0, this.stride, 11 * 4)\n            .addAttribute('aAlpha', buf, 0, false, 0, this.stride, 12 * 4);\n\t}\n\n\tbuf: Buffer;\n}\n","import { WRAP_MODES } from '@pixi/constants';\nimport { BaseTexture, Buffer, ObjectRenderer, Renderer } from '@pixi/core';\nimport { settings } from './settings';\nimport { TilemapGeometry, TilemapShader } from './TilemapShader';\nimport { TextileResource } from './TextileResource';\nimport * as utils from '@pixi/utils';\n\n// For some reason ESLint goes mad with indendation in this file ^&^\n/* eslint-disable no-mixed-spaces-and-tabs, indent */\n\n/**\n * Rendering helper pipeline for tilemaps. This plugin is registered automatically.\n */\nexport class TileRenderer extends ObjectRenderer\n{\n\t/** The managing renderer */\n\tpublic readonly renderer: Renderer;\n\n\t/** The tile animation frame */\n\tpublic tileAnim = [0, 0];\n\n\tprivate ibLen = 0;// index buffer length\n\n\t/** The index buffer for the tilemaps to share. */\n\tprivate indexBuffer: Buffer = null;\n\n\t/** The shader used to render tilemaps. */\n\tprivate shader: TilemapShader;\n\n\t/**\n\t * {@link TextileResource} instances used to upload textures batched in tiled groups. This is\n\t * used only if {@link settings.TEXTURES_PER_TILEMAP} is greater than 1.\n\t */\n\tprivate textiles: Array<TextileResource> = [];\n\n\t/** @param renderer - The managing renderer */\n\tconstructor(renderer: Renderer)\n\t{\n\t    super(renderer);\n\n\t    this.shader = new TilemapShader(settings.TEXTURES_PER_TILEMAP);\n\t    this.indexBuffer = new Buffer(undefined, true, true);\n\t    this.checkIndexBuffer(2000);\n\t    this.makeTextiles();\n\t}\n\n\t/**\n\t * Binds the tile textures to the renderer, and updates the tilemap shader's `uSamplerSize` uniform.\n\t *\n\t * If {@link settings.TEXTILE_UNITS}\n\t *\n\t * @param renderer - The renderer to which the textures are to be bound.\n\t * @param textures - The tile textures being bound.\n\t */\n\tbindTileTextures(renderer: Renderer, textures: Array<BaseTexture>): void\n\t{\n\t    const len = textures.length;\n\t\tconst shader = this.shader;\n\t    const maxTextures = settings.TEXTURES_PER_TILEMAP;\n\t\tconst samplerSize: Array<number> = shader.uniforms.uSamplerSize;\n\n\t    if (len > settings.TEXTILE_UNITS * maxTextures)\n\t    {\n\t\t\t// TODO: Show error message instead of silently failing!\n\t        return;\n\t    }\n\n\t\tif (settings.TEXTILE_UNITS <= 1)\n\t    {\n\t\t\t// Bind each texture directly & update samplerSize.\n\t\t\tfor (let i = 0; i < textures.length; i++)\n\t\t\t{\n\t\t\t\tconst texture = textures[i];\n\n\t\t\t\tif (!texture || !texture.valid)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trenderer.texture.bind(textures[i], i);\n\n\t\t\t\tsamplerSize[i * 2] = 1.0 / textures[i].realWidth;\n\t\t\t\tsamplerSize[(i * 2) + 1] = 1.0 / textures[i].realHeight;\n\t\t\t}\n\t    }\n\t\telse\n\t\t{\n\t\t\t// Ensure we have enough textiles, in case settings.TEXTILE_UNITS was modified.\n\t\t\tthis.makeTextiles();\n\n\t\t\tconst usedTextiles = Math.ceil(len / settings.TEXTILE_UNITS);\n\n\t\t\t// First ensure each textile has all tiles point to the right textures.\n\t\t\tfor (let i = 0; i < len; i++)\n\t\t\t{\n\t\t\t\tconst texture = textures[i];\n\n\t\t\t\tif (texture && texture.valid)\n\t\t\t\t{\n\t\t\t\t\tconst resourceIndex = Math.floor(i / settings.TEXTILE_UNITS);\n\t\t\t\t\tconst tileIndex = i % settings.TEXTILE_UNITS;\n\n\t\t\t\t\tthis.textiles[resourceIndex].tile(tileIndex, texture);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Then bind the textiles + update samplerSize.\n\t\t\tfor (let i = 0; i < usedTextiles; i++)\n\t\t\t{\n\t\t\t\trenderer.texture.bind(this.textiles[i].baseTexture, i);\n\n\t\t\t\tsamplerSize[i * 2] = 1.0 / this.textiles[i].width;\n\t\t\t\tsamplerSize[(i * 2) + 1] = 1.0 / this.textiles[i].baseTexture.height;\n\t\t\t}\n\t\t}\n\n\t\tshader.uniforms.uSamplerSize = samplerSize;\n\t}\n\n\tstart(): void\n\t{\n\t    // sorry, nothing\n\t}\n\n\t/**\n\t * @internal\n\t * @ignore\n\t */\n\tcreateVb(): TilemapGeometry\n\t{\n\t    const geom = new TilemapGeometry();\n\n\t    geom.addIndex(this.indexBuffer);\n\t    geom.lastTimeAccess = Date.now();\n\n\t    return geom;\n\t}\n\n\t/** @return The {@link TilemapShader} shader that this rendering pipeline is using. */\n\tgetShader(): TilemapShader { return this.shader; }\n\n\tdestroy(): void\n\t{\n\t    super.destroy();\n\t    // this.rectShader.destroy();\n\t    this.shader = null;\n\t}\n\n\tpublic checkIndexBuffer(size: number, _vb: TilemapGeometry = null): void\n\t{\n\t    const totalIndices = size * 6;\n\n\t    if (totalIndices <= this.ibLen)\n\t    {\n\t        return;\n\t    }\n\n\t    let len = totalIndices;\n\n\t    while (len < totalIndices)\n\t    {\n\t        len <<= 1;\n\t    }\n\n\t    this.ibLen = totalIndices;\n\t    this.indexBuffer.update(utils.createIndicesForQuads(size,\n\t        settings.use32bitIndex ? new Uint32Array(size * 6) : undefined));\n\n\t    // \tTODO: create new index buffer instead?\n\t    // if (vb) {\n\t    // \tconst curIndex = vb.getIndex();\n\t    // \tif (curIndex !== this.indexBuffer && (curIndex.data as any).length < totalIndices) {\n\t    // \t\tthis.swapIndex(vb, this.indexBuffer);\n\t    // \t}\n\t    // }\n\t}\n\n\t/** Makes textile resources and initializes {@link TileRenderer.textiles}. */\n\tprivate makeTextiles(): void\n\t{\n\t    if (settings.TEXTILE_UNITS <= 1)\n\t    {\n\t        return;\n\t    }\n\n\t    for (let i = 0; i < settings.TEXTILE_UNITS; i++)\n\t    {\n\t\t\tif (this.textiles[i]) continue;\n\n\t\t\tconst resource = new TextileResource();\n\t        const baseTex = new BaseTexture(resource);\n\n\t        baseTex.scaleMode = settings.TEXTILE_SCALE_MODE;\n\t        baseTex.wrapMode = WRAP_MODES.CLAMP;\n\n\t\t\tthis.textiles[i] = resource;\n\t    }\n\t}\n}\n\nRenderer.registerPlugin('tilemap', TileRenderer as any);\n","import { CanvasTileRenderer } from './CanvasTileRenderer';\nimport { CompositeTilemap } from './CompositeTilemap';\nimport { Constant } from './settings';\nimport { TextileResource } from './TextileResource';\nimport { Tilemap } from './Tilemap';\nimport { TilemapShader, TilemapGeometry } from './TilemapShader';\nimport { TileRenderer } from './TileRenderer';\n\n// Prevent SCALE_MODES from becoming lazy import in Constant.ts - which causes a import() in the declaration file,\n// which causes API extractor to fail https://github.com/microsoft/rushstack/issues/2140\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as constants from '@pixi/constants';\n\n// eslint-disable-next-line camelcase\nexport const pixi_tilemap = {\n    CanvasTileRenderer,\n    CompositeRectTileLayer: CompositeTilemap,\n    CompositeTilemap,\n    Constant,\n    TextileResource,\n    MultiTextureResource: TextileResource,\n    RectTileLayer: Tilemap,\n    Tilemap,\n    TilemapShader,\n    TilemapGeometry,\n    RectTileShader: TilemapShader,\n    RectTileGeom: TilemapGeometry,\n    TileRenderer,\n};\n\nexport * from './CanvasTileRenderer';\nexport * from './CompositeTilemap';\nexport * from './settings';\nexport * from './TextileResource';\nexport * from './Tilemap';\nexport * from './TilemapShader';\nexport * from './shaderGenerator';\nexport * from './TileRenderer';\n\nexport { CompositeTilemap as CompositeRectTileLayer } from './CompositeTilemap';\nexport { Tilemap as RectTileLayer } from './Tilemap';\n"],"names":["SCALE_MODES","Container","Bounds","Texture","groupD8","DRAW_MODES","Resource","ALPHA_MODES","Shader","Program","shaderGenerator.generateFragmentSrc","Matrix","shaderGenerator.fillSamplers","Geometry","Buffer","ObjectRenderer","utils.createIndicesForQuads","BaseTexture","WRAP_MODES","Renderer"],"mappings":"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"}